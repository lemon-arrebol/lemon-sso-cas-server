ext.libraries = [
        jaxb                    : [
                dependencies.create("javax.xml.bind:jaxb-api:$jaxbApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.ws:jaxws-api:$jaxbApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.main.javaee-api:javax.jws:$javaxJwsVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.main.javaee-api:javax.jms:$javaxJmsVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.soap:javax.xml.soap-api:$javaxSoapApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.jaxb:jaxb-runtime:$jaxbRuntimeVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("com.sun.istack:istack-commons-runtime:$istackVersion") {
                    force = true
                    transitive = false
                }
        ],
        aspectj                 : [
                dependencies.create("org.aspectj:aspectjrt:$aspectjVersion") {
                    force = true
                },
                dependencies.create("org.aspectj:aspectjweaver:$aspectjVersion") {
                    force = true
                }
        ],
        javamelody              : [
                dependencies.create("net.bull.javamelody:javamelody-spring-boot-starter:$javaMelodyVersion") {
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                }
        ],
        jgit                    : [
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit:$jgitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                }
        ],
        semver                  : [
                dependencies.create("com.vdurmont:semver4j:$semverVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        apachesyncope           : [
                dependencies.create("org.apache.syncope.common:syncope-common-lib:$apacheSyncopeVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.cxf", module: "cxf-rt-transports-http")
                    exclude(group: "org.apache.cxf", module: "cxf-rt-frontend-jaxrs")
                    exclude(group: "org.apache.cxf", module: "cxf-core")
                    force = true
                }
        ],
        splunklogging           : [
                dependencies.create("com.splunk.logging:splunk-library-javalogging:$splunkLoggingVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        oshi                    : [
                dependencies.create("com.github.oshi:oshi-core:$oshiVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "net.java.dev.jna", module: "jna-platform")
                    exclude(group: "net.java.dev.jna", module: "jna")
                    force = true
                }
        ],
        swagger                 : [
                dependencies.create("io.swagger:swagger-annotations:$swaggerVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-core:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-jaxrs:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-models:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        swaggerfox              : [
                dependencies.create("io.springfox:springfox-swagger2:$swaggerSpringFoxVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "io.swagger", module: "swagger-annotations")
                    exclude(group: "io.swagger", module: "swagger-core")
                    exclude(group: "io.swagger", module: "swagger-models")
                    exclude(group: "io.swagger", module: "swagger-jaxrs")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        swaggerui               : [
                dependencies.create("io.springfox:springfox-swagger-ui:$swaggerSpringFoxVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        influxdb                : [
                dependencies.create("org.influxdb:influxdb-java:$influxDbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.retrofit2", module: "retrofit")
                    exclude(group: "com.squareup.okio", module: "okio")
                    force = true
                },
                dependencies.create("com.squareup.retrofit2:retrofit:$retrofitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.okhttp3", module: "okhttp")
                    exclude(group: "com.squareup.okio", module: "okio")
                    force = true
                },
                dependencies.create("com.squareup.okhttp3:okhttp:$okhttp3Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        bouncycastle            : [
                dependencies.create("org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.cryptacular:cryptacular:$cryptacularVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                }
        ],
        sentry                  : [
                dependencies.create("com.getsentry.raven:raven:$sentryRavenVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("com.getsentry.raven:raven-log4j2:$sentryRavenVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        apachefortress          : [
                dependencies.create("org.apache.directory.fortress:fortress-core:$apacheFortressVersion") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.sun.mail", module: "javax.mail")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "org.apache.directory.api", module: "api-all")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.openldap", module: "accelerator")
                    exclude(group: "org.openldap", module: "accelerator-impl")
                    exclude(group: "org.openldap", module: "accelerator-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "net.sf.ehcache", module: "ehcache-core")
                }
        ],
        cassandra               : [
                dependencies.create("com.datastax.cassandra:cassandra-driver-core:$cassandraDriverVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-annotation")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-jvm")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("com.datastax.cassandra:cassandra-driver-mapping:$cassandraDriverVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-annotation")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-jvm")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }
        ],
        apachefediz             : [
                dependencies.create("org.apache.cxf.fediz:fediz-core:$apacheFedizVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    force = true
                },
        ],
        apachecxf               : [
                dependencies.create("org.apache.cxf:cxf-rt-transports-http:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-frontend-jaxws:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-security:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-security-sso-saml:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-policy:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-addr:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-client:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-frontend-jaxrs:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-service-description:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-extension-providers:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("org.apache.cxf.services.sts:cxf-services-sts-core:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        casclient               : dependencies.create("org.jasig.cas.client:cas-client-core:$casClientVersion") {
            exclude(group: "javax.servlet", module: "servlet-api")
            exclude(group: "org.slf4j", module: "log4j-over-slf4j")
            exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            force = true
        },
        commons                 : [
                dependencies.create("commons-io:commons-io:$commonsIoVersion") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-text:$commonsTextVersion") {
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-pool2:$commonsPoolVersion") {
                    force = true
                },
                dependencies.create("commons-cli:commons-cli:$commonsCliVersion") {
                    force = true
                },
                dependencies.create("commons-beanutils:commons-beanutils:$commonsBeansVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("commons-logging:commons-logging:$commonsLoggingVersion") {
                    force = true
                },
                dependencies.create("commons-validator:commons-validator:$commonsValidatorVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-digester", module: "commons-digester")
                    force = true
                },
                dependencies.create("commons-codec:commons-codec:$commonsCodecVersion") {
                    force = true
                },
                dependencies.create("commons-jexl:commons-jexl:$commonsJexlVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-lang3:$commonsLangVersion") {
                    force = true
                },
                dependencies.create("commons-lang:commons-lang:2.6") {
                    force = true
                },
                dependencies.create("org.jooq:jool:$joolVersion") {
                    force = true
                },
                dependencies.create("commons-collections:commons-collections:$commonsCollections3Version") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-collections4:$commonsCollectionsVersion") {
                    force = true
                }
        ],
        ehcache                 : [
                dependencies.create("net.sf.ehcache:ehcache:$ehcacheVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.ehcache:jcache:$jcacheVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    force = true
                }
        ],
        findbugscontrib         : dependencies.create("com.mebigfatguy.sb-contrib:sb-contrib:$spotbugsContribVersion") {
            force = true
        },
        findbugs                : dependencies.create("com.github.spotbugs:spotbugs:$spotbugsVersion") {
            force = true
        },
        findbugsannotations     : dependencies.create("com.github.spotbugs:spotbugs-annotations:$spotbugsVersion") {
            force = true
        },
        findbugssec             : dependencies.create("com.h3xstream.findsecbugs:findsecbugs-plugin:$findbugsSecVersion") {
            force = true
        },
        groovy                  : [
                dependencies.create("org.codehaus.groovy:groovy-jsr223:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-json:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-xml:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-datetime:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-sql:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-groovysh:$groovyVersion") {
                    exclude(group: "org.codehaus.groovy", module: "groovy-swing")
                    exclude(group: "org.codehaus.groovy", module: "groovy-console")
                    force = true
                }
        ],
        grouper                 : dependencies.create("edu.internet2.middleware.grouper:grouperClient:$grouperVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "junit", module: "junit")
            exclude(group: "joda-time", module: "joda-time")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "xml-apis", module: "xml-apis")
            exclude(group: "xom", module: "xom")
            exclude(group: "commons-lang", module: "commons-lang")
            exclude(group: "javax.mail", module: "mail")
            exclude(group: "commons-beanutils", module: "commons-beanutils")
            exclude(group: "org.quartz-scheduler", module: "quartz")
            exclude(group: "log4j", module: "log4j")
            force = true
        },
        maxmind                 : [
                dependencies.create("com.maxmind.geoip2:geoip2:$maxmindVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    force = true
                }
        ],
        userinfogeocoding       : [
                dependencies.create("io.userinfo:userinfo-java:$userInfoVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.retrofit", module: "retrofit")
                    force = true
                },
                dependencies.create("com.squareup.retrofit:retrofit:$retrofit1Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.gson", module: "gson")
                    force = true
                },
                dependencies.create("com.google.code.gson:gson:$gsonVersion") {
                    force = true
                }
        ],
        googlegeocoding         : [
                dependencies.create("com.google.maps:google-maps-services:$googleMapsGeoCodingVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.okio", module: "okio")
                    force = true
                },
                dependencies.create("com.squareup.okhttp3:okhttp:$okhttp3Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        okhttp                  : [
                dependencies.create("com.squareup.okhttp:okhttp-urlconnection:$okioHttpVersion") {
                    exclude(group: "com.squareup.okio", module: "okio")
                    force = true
                },
                dependencies.create("com.squareup.okio:okio:$okioVersion") {
                    force = true
                }
        ],
        caffein                 : [
                dependencies.create("com.github.ben-manes.caffeine:caffeine:$caffeinVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("com.github.ben-manes.caffeine:guava:$caffeinVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        guava                   : [
                dependencies.create("com.google.guava:guava:$guavaVersion") {
                    exclude(group: "com.google.errorprone", module: "error_prone_annotations")
                    force = true
                },
                dependencies.create("org.reflections:reflections:$reflectionsVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.javassist", module: "javassist")
                    force = true
                },
                dependencies.create("org.javassist:javassist:$javassistVersion") {
                    force = true
                },
                dependencies.create("org.springmodules:spring-modules-cache:0.8") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "ant", module: "ant")
                    exclude(group: "xstream", module: "xstream")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "xpp3", module: "xpp3_min")
                    exclude(group: "jcs", module: "jcs")
                    exclude(group: "jboss", module: "jboss-system")
                    exclude(group: "jboss", module: "javassist")
                    exclude(group: "jboss", module: "jboss-cache")
                    exclude(group: "jboss", module: "jboss-jmx")
                    exclude(group: "jboss", module: "jboss-minimal")
                    exclude(group: "jboss", module: "jboss-common")
                    exclude(group: "jgroups", module: "jgroups-all")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "xjavadoc", module: "xjavadoc")
                    exclude(group: "jini", module: "xjavadoc")
                    exclude(group: "jini", module: "jsk-platform")
                    exclude(group: "jini", module: "boot")
                    exclude(group: "jini", module: "jsk-lib")
                    exclude(group: "jini", module: "mahalo")
                    exclude(group: "jini", module: "reggie")
                    exclude(group: "jini", module: "start")
                    exclude(group: "jini", module: "webster")
                    exclude(group: "ehcache", module: "ehcache")
                    exclude(group: "gigaspaces", module: "gigaspaces-ce")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.springframework", module: "spring")
                    force = true
                }
        ],
        hazelcast               : [
                dependencies.create("com.hazelcast:hazelcast:$hazelcastVersion") {
                    force = true
                }
        ],
        hazelcastaws            : [
                dependencies.create("com.hazelcast:hazelcast-aws:$hazelcastAwsVersion") {
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        hazelcastazure          : [
                dependencies.create("com.hazelcast:hazelcast-azure:$hazelcastAzureVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    force = true
                }
        ],
        hazelcastkubernetes     : [
                dependencies.create("com.hazelcast:hazelcast-kubernetes:$hazelcastKubernetesVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    force = true
                }
        ],
        hazelcastswarm          : [
                dependencies.create("org.bitsofinfo:hazelcast-docker-swarm-discovery-spi:$hazelcastSwarmVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    force = true
                }
        ],
        jclouds                 : [
                dependencies.create("com.hazelcast:hazelcast-jclouds:$hazelcastJCloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    force = true
                },
                dependencies.create("org.apache.jclouds:jclouds-compute:$jcloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.jclouds:jclouds-allcompute:$jcloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.jclouds.labs:google-compute-engine:$jcloudsGoogleEngineVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        jasypt                  : dependencies.create("org.jasypt:jasypt:$jasyptVersion") {
            exclude(group: "commons-cli", module: "commons-cli")
            exclude(group: "org.slf4j", module: "slf4j-api")
            force = true
        },
        hibernate               : [
                dependencies.create("org.hibernate:hibernate-core:$hibernateVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.jboss.logging", module: "jboss-logging-annotations")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "org.glassfish.jaxb", module: "jaxb-runtime")
                    force = true
                },
                dependencies.create("org.dom4j:dom4j:$dom4jVersion") {
                    exclude(group: "xml-apis", module: "xml-apis")
                    force = true
                },
                dependencies.create("net.bytebuddy:byte-buddy:$bytebuddyVersion") {
                    force = true
                },
                dependencies.create("org.hibernate:hibernate-hikaricp:$hibernateVersion") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    force = true
                },
                dependencies.create("org.hibernate:hibernate-entitymanager:$hibernateVersion") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    force = true
                },
                dependencies.create("org.hibernate:hibernate-validator:$hibernateValidatorVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    force = true
                },
                dependencies.create("com.zaxxer:HikariCP:$hikariVersion") {
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("javax.el:javax.el-api:3.0.0") {
                    force = true
                },
                dependencies.create("org.glassfish.web:el-impl:2.2") {
                    exclude(group: "javax.el", module: "javax.el-api")
                    exclude(group: "javax.el", module: "el-api")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        httpclient              : [
                dependencies.create("org.apache.httpcomponents:httpclient:$httpclientVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    force = true
                },
                dependencies.create("org.apache.httpcomponents:httpcore:$httpCoreVersion") {
                    force = true
                }
        ],
        awsclouddirectory       : [
                dependencies.create("com.amazonaws:aws-java-sdk-clouddirectory:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        aws                     : [
                dependencies.create("com.amazonaws:aws-java-sdk-core:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        awssns                  : [
                dependencies.create("com.amazonaws:aws-java-sdk-sns:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        awss3                   : [
                dependencies.create("com.amazonaws:aws-java-sdk-s3:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        awscognito              : [
                dependencies.create("com.amazonaws:aws-java-sdk-cognitoidp:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        awssecretsmanager       : [
                dependencies.create("com.amazonaws:aws-java-sdk-secretsmanager:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        awscloudwatch           : [
                dependencies.create("com.amazonaws:aws-java-sdk-logs:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("com.amazonaws:aws-java-sdk-cloudwatch:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                }
        ],
        awsjavadynamodb         : [
                dependencies.create("com.amazonaws:aws-java-sdk-s3:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("com.amazonaws:aws-java-sdk-dynamodb:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                }
        ],
        apachevelocity          : [
                dependencies.create("org.apache.velocity:velocity-engine-core:$apacheVelocityEngineVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("org.apache.velocity:velocity:$apacheVelocityVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                }
        ],
        googleauth              : [
                dependencies.create("com.warrenstrange:googleauth:$googleAuthVersion") {
                    transitive = false
                    force = true
                }
        ],
        zxingbarcode            : [
                dependencies.create("com.google.zxing:core:$googleZxingVersion") {
                    exclude(group: "com.google.zxing", module: "android-core")
                    exclude(group: "com.google.zxing", module: "android-integration")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    force = true
                }
        ],
        shibidpjavasupport      : [
                dependencies.create("net.shibboleth.utilities:java-support:$shibbolethUtilJavaSupportVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    force = true
                }
        ],
        shibidp                 : [
                dependencies.create("net.shibboleth.idp:idp-attribute-filter-api:$idpVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("net.shibboleth.liberty:idwsfconsumer:$idpLibertyIdwsConsumerVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-impl")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-spring")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-impl")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-session-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-resolver-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.opensaml", module: "opensaml-session-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-attribute-api:$idpVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-attribute-resolver-api:$idpVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-core:$idpVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-profile-impl:$idpVersion") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-spring")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-profile-spring:$idpVersion") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-impl")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-saml-api:$idpVersion") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    force = true
                },
                dependencies.create("net.shibboleth.idp:idp-saml-impl:$idpVersion") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-joda")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    force = true
                }
        ],
        ignite                  : [
                dependencies.create("org.apache.ignite:ignite-core:$igniteVersion") {
                    force = true
                },
                dependencies.create("org.apache.ignite:ignite-log4j2:$igniteVersion") {
                    exclude(group: "log4j", module: "log4j")
                    force = true
                },
                dependencies.create("org.apache.ignite:ignite-spring:$igniteVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    force = true
                }
        ],
        infinispan              : [
                dependencies.create("org.infinispan:infinispan-cachestore-remote:$infinispanVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.iq80.leveldb", module: "leveldb-api")
                    exclude(group: "org.fusesource.leveldbjni", module: "leveldbjni")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "com.github.ben-manes.caffein", module: "caffein")
                    force = true
                },
                dependencies.create("org.infinispan:infinispan-commons:$infinispanVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "com.github.ben-manes.caffein", module: "caffein")
                    force = true
                },
                dependencies.create("org.infinispan:infinispan-core:$infinispanVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "com.github.ben-manes.caffein", module: "caffein")
                    force = true
                }
        ],
        inspektr                : [
                dependencies.create("org.apereo.inspektr:inspektr-audit:$inspektrVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.hjson", module: "hjson")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.apereo.inspektr:inspektr-support-spring:$inspektrVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hjson", module: "hjson")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                }
        ],
        javax                   : [
                dependencies.create("javax.servlet:javax.servlet-api:$javaxServletVersion") {
                    force = true
                }
        ],
        javaximpl               : [
                dependencies.create("javax.servlet:jstl:$javaxJstlVersion"),
                dependencies.create("javax.transaction:jta:$jtaVersion")
        ],
        thymeleafdialect        : [
                dependencies.create("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:$thymeleafDialectVersion") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                    force = true
                }
        ],
        activemq                : [
                dependencies.create("org.springframework.boot:spring-boot-starter-activemq:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.activemq", module: "activemq-client")
                    exclude(group: "org.fusesource.hawtbuf", module: "hawtbuf")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    force = true
                },
                dependencies.create("org.apache.activemq:activemq-pool:$activemqPoolVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.activemq:activemq-broker:$activemqPoolVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.messaginghub:pooled-jms:1.1.0") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.apache.commons", module: "commons-pool2")
                    force = true
                }
        ],
        thymeleaf               : [
                dependencies.create("org.thymeleaf:thymeleaf-spring5:$thymeleafVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.thymeleaf", module: "thymeleaf-spring5")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "nz.net.ultraq.thymeleaf", module: "thymeleaf-layout-dialect")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                }
        ],
        unboundidscim           : [
                dependencies.create("com.unboundid.product.scim2:scim2-sdk-client:$unboundidScim2Version") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.jaxrs", module: "jackson-jaxrs-json-provider")
                    exclude(group: "org.apache.wink", module: "wink-client")
                    exclude(group: "org.apache.wink", module: "wink-common")
                    exclude(group: "com.unboundid.components", module: "json")
                    exclude(group: "org.apache.geronimo.specs", module: "geronimo-jaxrs_1.1_spec")
                    force = true
                },
                dependencies.create("com.unboundid.product.scim:scim-sdk:$unboundidScim1Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.glassfish.jersey.core", module: "oauth2-client")
                    exclude(group: "org.glassfish.jersey.core", module: "jersey-common")
                    exclude(group: "org.glassfish.jersey.core", module: "jersey-client")
                    exclude(group: "javax.ws.rs", module: "javax.ws.rs-api")
                    exclude(group: "javax.xml.bind", module: "jaxb-api")
                    exclude(group: "com.sun.xml.bind", module: "jaxb-impl")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.wink", module: "wink-client")
                    exclude(group: "org.apache.wink", module: "wink-common")
                    exclude(group: "org.apache.geronimo.specs", module: "geronimo-jaxrs_1.1_spec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.unboundid.components", module: "json")
                    force = true
                },
                dependencies.create("org.glassfish.jersey.security:oauth2-client:$jerseyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }
        ],
        jackson                 : [
                dependencies.create("com.fasterxml.jackson.core:jackson-databind:$jacksonCoreVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("org.hjson:hjson:$hjsonVersion") {
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion") {
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                }
        ],
        couchbase               : dependencies.create("com.couchbase.client:java-client:$couchbaseVersion"),
        ektorp                  : dependencies.create("org.ektorp:org.ektorp:$ektorpVersion"),
        jcifs                   : [
                dependencies.create("jcifs:jcifs:$jcifsVersion") {
                    exclude(group: "javax.servlet", module: "servlet-api")
                    force = true
                },
                dependencies.create("org.samba.jcifs:jcifs-ext:$jcifsExtVersion") {
                    exclude(group: "javax.servlet", module: "servlet-api")
                    force = true
                }
        ],
        snakeyaml               : [
                dependencies.create("org.yaml:snakeyaml:$snakeYamlVersion") {
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-io", module: "commons-io")
                    force = true
                }
        ],
        azurekeyvault           : [
                dependencies.create("com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter:$azureKeyVaultSecretsVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                }
        ],
        cosmosdb                : [
                dependencies.create("com.microsoft.azure:azure-documentdb:$cosmosdbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.microsoft.azure:spring-data-documentdb:$springDataCosmosDbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        jdom                    : dependencies.create("jdom:jdom:$jdomVersion") {
            exclude(group: "xml-apis", module: "xml-apis")
            force = true
        },
        jodatime                : dependencies.create("joda-time:joda-time:$jodaTimeVersion") {
            force = true
        },
        jose4j                  : dependencies.create("org.bitbucket.b_c:jose4j:$jose4jVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            force = true
        },
        jradius                 : [
                dependencies.create("net.jradius:jradius-core:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "net.sf.ehcache", module: "ehcache-core")
                    force = true
                },
                dependencies.create("net.jradius:jradius-dictionary:1.1.5") {
                    exclude(group: "net.jradius", module: "jradius-core")
                },
                dependencies.create("gnu.getopt:java-getopt:1.0.13") {
                    force = true
                }
        ],
        tests                   : [
                dependencies.create("com.github.kstyrc:embedded-redis:$embeddedRedisVersion") {
                    exclude(module: "commons-io")
                    force = true
                },
                dependencies.create("org.mockito:mockito-core:$mockitoVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    force = true
                },
                dependencies.create("org.mockito:mockito-junit-jupiter:$mockitoVersion") {
                    exclude(group: "org.mockito", module: "mockito-core")
                    exclude(group: "org.junit.jupiter", module: "junit-jupiter-api")
                    force = true
                },
                dependencies.create("org.objenesis:objenesis:$objenesisVersion") {
                    exclude(group: "org.mockito", module: "mockito-all")
                    force = true
                },
                dependencies.create("junit:junit:4.12") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-api:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-engine:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-params:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.vintage:junit-vintage-engine:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-engine:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-suite-api:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-launcher:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-runner:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.skyscreamer", module: "jsonassert")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-all")
                    exclude(group: "org.mockito", module: "mockito-core")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                },
                dependencies.create("org.hsqldb:hsqldb:$hsqlVersion"),
                dependencies.create("org.skyscreamer:jsonassert:$jsonassertVersion") {
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework:spring-test:$springVersion") {
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.json:json:$jsonVersion") {
                    force = true
                }
        ],
        kryo                    : [
                dependencies.create("com.esotericsoftware:kryo:$kryoVersion") {
                    exclude(group: "net.spy", module: "spymemcached")
                    exclude(group: "org.objenesis", module: "objenesis")
                    force = true
                },
                dependencies.create("de.javakaffee:kryo-serializers:$kryoSerializersVersion") {
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.objenesis", module: "objenesis")
                    force = true
                },
                dependencies.create("org.objenesis:objenesis:$objenesisVersion") {
                    exclude(group: "org.mockito", module: "mockito-all")
                    force = true
                }
        ],
        memcached               : [
                dependencies.create("net.spy:spymemcached:$spymemcachedVersion") {
                    force = true
                }
        ],
        awselasticachememcached : [
                dependencies.create("com.amazonaws:elasticache-java-cluster-client:$awsmemcachedVersion") {
                    force = true
                }
        ],
        ldaptive                : [
                dependencies.create("org.ldaptive:ldaptive:$ldaptiveVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.ldaptive:ldaptive-beans:$ldaptiveVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.ldaptive:ldaptive-unboundid:$ldaptiveVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "com.unboundid", module: "unboundid-ldapsdk")
                    force = true
                },
                dependencies.create("com.unboundid:unboundid-ldapsdk:$unboundidVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                }
        ],
        log4j                   : [
                dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j-impl")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-jcl")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-api:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-core:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-jcl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-web:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-slf4j18-impl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("com.lmax:disruptor:$disruptorVersion")
        ],
        slf4j                   : [
                dependencies.create("org.slf4j:slf4j-api:$slf4jVersion"),
                dependencies.create("org.slf4j:jul-to-slf4j:$slf4jVersion"),
                dependencies.create("org.slf4j:jcl-over-slf4j:$slf4jVersion"),
        ],
        metrics                 : [
                dependencies.create("com.timgroup:java-statsd-client:$statsdVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-core:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-prometheus:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-graphite:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-ganglia:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-jmx:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-influx:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-statsd:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-atlas:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-signalfx:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-wavefront:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.signalfx.public", module: "signalfx-java")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-new-relic:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-cloudwatch:$micrometerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("com.signalfx.public:signalfx-java:$signalFxVersion") {
                    force = true
                }
        ],
        mongo                   : [
                dependencies.create("org.mongodb:mongo-java-driver:$mongoDriverVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-mongodb:$springDataMongoDbVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.data", module: "spring-data-commons")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                }
        ],
        openid4java             : dependencies.create("org.openid4java:openid4java:$openidVersion") {
            exclude(group: "xerces", module: "xercesImpl")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "org.slf4j", module: "slf4j-api")
            force = true
        },
        opensaml                : [
                dependencies.create("xerces:xercesImpl:$xercesVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-core:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-session-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-xmlsec-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-saml-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-profile-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-saml-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-security-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-xacml-saml-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-xacml-saml-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-security-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-soap-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-messaging-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-profile-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    force = true
                },
                dependencies.create("org.opensaml:opensaml-storage-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-orm")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                }
        ],
        pac4jcore               : [
                dependencies.create("org.pac4j:pac4j-config:$pac4jVersion") {
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-core:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-http:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.pac4j:spring-webmvc-pac4j:$pac4jSpringWebmvcVersion") {
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.aspectj", module: "aspectjweaver")
                    exclude(group: "org.pac4j", module: "pac4j-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                }
        ],
        pac4jjwt                : [
                dependencies.create("org.pac4j:pac4j-jwt:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                }
        ],
        pac4jcas                : [
                dependencies.create("org.pac4j:pac4j-cas:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-support-saml")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-core")
                    force = true
                }
        ],
        pac4jsaml               : [
                dependencies.create("org.pac4j:pac4j-saml-opensamlv3:$pac4jVersion") {
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.annotation", module: "javax.annotation-api")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "net.shibboleth.idp", module: "profile-impl")
                    exclude(group: "net.shibboleth.idp", module: "profile-spring")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-impl")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-api")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "xalan", module: "xalan")
                    exclude(group: "xalan", module: "serializer")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    force = true
                }
        ],
        pac4j                   : [
                dependencies.create("org.pac4j:pac4j-oidc:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-oauth:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.commons", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                }
        ],
        nimbus                  : [
                dependencies.create("com.nimbusds:nimbus-jose-jwt:$nimbusJoseVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("com.nimbusds:oauth2-oidc-sdk:$nimbusOidcVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.sun.mail", module: "javax.mail")
                    force = true
                },
                dependencies.create("net.minidev:json-smart:$jsonSmartVersion") {
                    force = true
                }
        ],
        pac4jcouchdb            : [
                dependencies.create("org.pac4j:pac4j-couch:$pac4jVersion") {
                    exclude(group: "org.pac4j", module: "pac4j-core")
                    exclude(group: "org.ektorp", module: "org.ektorp")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                }
        ],
        pac4jmongodb            : [
                dependencies.create("org.pac4j:pac4j-mongo:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                }
        ],
        persondirectory         : dependencies.create("org.apereo.service.persondir:person-directory-impl:$personDirectoryVersion") {
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "org.apache.commons", module: "commons-lang3")
            exclude(group: "org.apache.commons", module: "commons-collections4")
            exclude(group: "org.springframework", module: "spring-beans")
            exclude(group: "org.ldaptive", module: "ldaptive")
            exclude(group: "org.springframework", module: "spring-context")
            exclude(group: "org.springframework", module: "spring-core")
            exclude(group: "org.springframework", module: "spring-tx")
            exclude(group: "com.google.guava", module: "guava")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "com.sun.xml.bind", module: "jaxb-impl")
            force = true
        },
        quartz                  : dependencies.create("org.quartz-scheduler:quartz:$quartzVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "c3p0", module: "c3p0")
            exclude(group: "com.mchange", module: "c3p0")
            exclude(group: "com.zaxxer", module: "HikariCP-java6")
            force = true
        },
        shiro                   : [
                dependencies.create("org.apache.shiro:shiro-core:$shiroVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    force = true
                }
        ],
        twilio                  : dependencies.create("com.twilio.sdk:twilio:$twilioVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            force = true
        },
        nexmo                   : dependencies.create("com.nexmo:client:$nexmoVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "commons-codec", module: "commons-codec")
            exclude(group: "org.apache.commons", module: "commons-lang3")
            force = true
        },
        textmagic               : [
                dependencies.create("com.textmagic.sdk:textmagic-java-sdk:$textMagicVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.codehaus.jackson", module: "jackson-mapper-asl")
                    exclude(group: "commons-lang", module: "commons-lang")
                    force = true
                },
                dependencies.create("org.codehaus.jackson:jackson-mapper-asl:${jacksonAslVersion}") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.codehaus.jackson:jackson-core-asl:${jacksonAslVersion}") {
                    transitive = false
                    force = true
                }
        ],
        springbootconfigmetadata: [
                dependencies.create("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.json:json:$jsonVersion") {
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-configuration-metadata:$springBootVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                }
        ],
        javaparser              : [
                dependencies.create("com.github.javaparser:javaparser-core:$javaParserVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }
        ],
        springbootadminserver   : [
                dependencies.create("de.codecentric:spring-boot-admin-starter-server:$springBootAdminVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    force = true
                }
        ],
        springbootadminclient   : [
                dependencies.create("de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springbootdevtools      : [
                dependencies.create("org.springframework.boot:spring-boot-devtools:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                }
        ],
        springbootlogging       : [
                dependencies.create("org.springframework.boot:spring-boot-starter-logging:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    force = true
                },
                dependencies.create("ch.qos.logback:logback-core:$logbackVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("ch.qos.logback:logback-access:$logbackVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("ch.qos.logback:logback-classic:$logbackVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                }
        ],
        springboot              : [
                dependencies.create("org.springframework.boot:spring-boot-starter-mail:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-aop:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.aspectj", module: "aspectjweaver")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-properties-migrator:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-actuator:$springBootVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                }
        ],
        springboottomcat        : [
                dependencies.create("org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                },
                dependencies.create("org.apache.tomcat:tomcat-catalina-ha:$springBootTomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                    force = true
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-core:$springBootTomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                    force = true
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-el:$springBootTomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                    force = true
                }
        ],
        springbootjetty         : [
                dependencies.create("org.springframework.boot:spring-boot-starter-jetty:$springBootVersion") {
                    exclude(group: "org.ow2.asm", module: "asm")
                    force = true
                },
                dependencies.create("javax.annotation:javax.annotation-api:$javaxAnnotationApiVersion") {
                    force = true
                }
        ],
        springbootundertow      : [
                dependencies.create("org.springframework.boot:spring-boot-starter-undertow:$springBootVersion") {
                    force = true
                }
        ],
        springbootredis         : [
                dependencies.create("org.springframework.boot:spring-boot-starter-data-redis:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    force = true
                }
        ],
        springintegration       : [
                dependencies.create("org.springframework.integration:spring-integration-core:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework.integration:spring-integration-jmx:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springcloudbus          : [
                dependencies.create("org.springframework.cloud:spring-cloud-bus:$springCloudBusVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    force = true
                },
        ],
        springcloudbuskafka     : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-kafka:$springCloudBusVersion") {
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "org.springframework.kafka", module: "spring-kafka")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.scala-lang", module: "scala-library")
                    exclude(group: "org.apache.kafka", module: "kafka-clients")
                    force = true
                },
                dependencies.create("org.springframework.kafka:spring-kafka:$kafkaSpringVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.scala-lang", module: "scala-library")
                    force = true
                }
        ],
        springintegrationamqp   : [
                dependencies.create("org.springframework.integration:spring-integration-amqp:$springIntegrationVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    force = true
                }
        ],
        springcloudbusamqp      : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-monitor:$springCloudConfigVersion") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-bus")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-amqp:$springCloudBusVersion") {
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.springframework.amqp", module: "spring-rabbit")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    force = true
                }
        ],
        zookeeper               : [
                dependencies.create("org.apache.zookeeper:zookeeper:$zookeeperVersion") {
                    exclude(group: "jline", module: "jline")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.apache.curator", module: "curator-framework")
                    exclude(group: "org.apache.curator", module: "curator-client")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-recipes:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-framework:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-client:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springcloudconsul       : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-consul-all:$springCloudConsulVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        springcloudeureka       : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springCloudEurekaVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.netflix.eureka", module: "eureka-client")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.gson", module: "gson")
                    exclude(group: "com.thoughtworks.xstream", module: "xstream")
                    force = true
                }
        ],
        eurekaclient            : [
                dependencies.create("com.netflix.eureka:eureka-client:$eurekaClientVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-eureka")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "com.netflix.netflix-commons", module: "netflix-eventbus")
                    exclude(group: "com.google.code.gson", module: "gson")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    force = true
                },
                dependencies.create("com.netflix.netflix-commons:netflix-eventbus:0.3.0") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "com.thoughtworks.xstream", module: "xstream")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.code.gson", module: "gson")
                    force = true
                }
        ],
        ribbon                  : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-netflix-ribbon:$springCloudEurekaVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "com.netflix.ribbon", module: "ribbon")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-transport")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("com.netflix.ribbon:ribbon:$ribbonVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-transport")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    force = true
                },
                dependencies.create("com.netflix.ribbon:ribbon-loadbalancer:$ribbonVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("com.netflix.ribbon:ribbon-httpclient:$ribbonVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-eureka")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    force = true
                },
                dependencies.create("com.netflix.ribbon:ribbon-eureka:$ribbonVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.netflix.eureka", module: "eureka-client")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.thoughtworks.xstream", module: "xstream")
                    force = true
                },
                dependencies.create("com.netflix.ribbon:ribbon-transport:$ribbonVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-eureka")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    force = true
                }
        ],
        springcloudeurekaserver : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:$springCloudEurekaVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "com.netflix.eureka", module: "eureka-client")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-starter-ribbon")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-loadbalancer")
                    exclude(group: "com.netflix.ribbon", module: "ribbon")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-transport")
                    exclude(group: "com.netflix.ribbon", module: "ribbon-eureka")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                }
        ],
        springcloudsleuth       : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-sleuth:$springCloudSleuthVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.fasterxml", module: "classmate")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zipkin:$springCloudSleuthVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    force = true
                }
        ],
        springcloudzookeeper    : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zookeeper-config:$springCloudZookeeperVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zookeeper:$springCloudZookeeperVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    force = true
                }
        ],
        springcloudvault        : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-vault-config:$springCloudVaultVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    force = true
                }
        ],
        springcloudconfigclient : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-client:$springCloudConfigVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    force = true
                }
        ],
        springcloudconfigserver : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-server:$springCloudConfigVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework.security", module: "spring-security-core")
                    exclude(group: "org.springframework.security", module: "spring-security-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    force = true
                }
        ],
        springcloud             : [
                dependencies.create("org.springframework.cloud:spring-cloud-commons:$springCloudCommonsVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-context:$springCloudContextVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    force = true
                }
        ],

        springsession           : [
                dependencies.create("org.springframework.session:spring-session-core:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springsessionhazelcast  : [
                dependencies.create("org.springframework.session:spring-session-hazelcast:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springsessionjdbc       : [
                dependencies.create("org.springframework.session:spring-session-jdbc:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springsessionredis      : [
                dependencies.create("org.springframework.session:spring-session-data-redis:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springsessionmongo      : [
                dependencies.create("org.springframework.session:spring-session-data-mongodb:$springSessionMongoVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework.session", module: "spring-session")
                    force = true
                }
        ],

        springshell             : [
                dependencies.create("org.springframework.shell:spring-shell-starter:$springShellVersion") {
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "jline", module: "jline")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }
        ],

        spring                  : [
                dependencies.create("org.springframework:spring-aop:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                },
                dependencies.create("org.springframework:spring-beans:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-binding:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework:spring-context:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-context-support:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework.retry:spring-retry:$springRetryVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                },
                dependencies.create("org.springframework:spring-core:$springVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-commons:$springDataCommonsVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                },

                dependencies.create("org.springframework:spring-jms:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-messaging")
                    force = true
                },
                dependencies.create("org.springframework:spring-messaging:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-expression:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-jdbc:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-orm:$springVersion"),
                dependencies.create("org.springframework:spring-tx:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-web:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-webflow:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                },
                dependencies.create("org.springframework:spring-webmvc:$springVersion") {
                    force = true
                }
        ],

        springsecurityconfig    : [
                dependencies.create("org.springframework.security:spring-security-config:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springsecurityweb       : [
                dependencies.create("org.springframework.security:spring-security-web:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springsecurity          : [
                dependencies.create("org.springframework.security:spring-security-core:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-rsa:$springSecurityRsaVersion") {
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-crypto:$springSecurityVersion") {
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-tx")
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-cas:$springSecurityVersion") {
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                }
        ],
        springws                : [
                dependencies.create("org.springframework.boot:spring-boot-starter-web-services:$springBootVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    force = true
                },
                dependencies.create("org.springframework.ws:spring-ws-security:$springWsVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    force = true
                }
        ],
        wss4j                   : [
                dependencies.create("org.apache.wss4j:wss4j-ws-security-dom:$wss4jVersion") {
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("org.apache.wss4j:wss4j-ws-security-common:$wss4jVersion") {
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    force = true
                },
                dependencies.create("wsdl4j:wsdl4j:$wsdl4jVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    force = true
                },
                dependencies.create("com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    force = true
                }
        ],
        validationapi           : dependencies.create("javax.validation:validation-api:$javaxValidationVersion"),
        xmlapis                 : dependencies.create("xml-apis:xml-apis:$xmlapisVersion") {
            force = true
        },
        yubicoapi               :
                dependencies.create("com.yubico:yubico-validation-client2:$yubicoVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    force = true
                },
        u2flibserver            :
                dependencies.create("com.yubico:u2flib-server-core:$yubicoU2fServerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
        duojava                 : [
                dependencies.create("net.unicon.iam:duo-java:$duoVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("net.unicon.iam:duo-client:0.2.2") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        authyjava               : [
                dependencies.create("com.authy:authy-java:$authyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                    force = true
                }
        ],
        bucket4j                : [
                dependencies.create("com.github.vladimir-bukhtoyarov:bucket4j-core:$bucket4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                    force = true
                }
        ],
        webjars                 : [
                dependencies.create("org.webjars:headjs:$headjsVersion") {
                    force = true
                },
                dependencies.create("org.webjars:font-awesome:$fontAwesomeVersion") {
                    force = true
                },
                dependencies.create("org.webjars:jquery-ui:$jqueryUiVersion") {
                    exclude(group: "org.webjars", module: "jquery")
                    force = true
                },
                dependencies.create("org.webjars:jquery:$jqueryVersion") {
                    force = true
                },
                dependencies.create("org.webjars.bowergithub.dropbox:zxcvbn:$zxcvbnVersion") {
                    force = true
                },
                dependencies.create("org.webjars:bootstrap:$bootstrapVersion") {
                    exclude(group: "org.webjars", module: "popper.js")
                    exclude(group: "org.webjars", module: "jquery")
                    force = true
                },
                dependencies.create("org.webjars:datatables:$datatablesVersion") {
                    exclude(group: "org.webjars", module: "jquery")
                    force = true
                },
                dependencies.create("org.webjars:bootstrap-select:$bootstrapSelectVersion") {
                    exclude(group: "org.webjars", module: "jquery")
                    exclude(group: "org.webjars", module: "bootstrap")
                    force = true
                }
        ]
]
